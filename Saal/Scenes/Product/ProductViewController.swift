//
//  AddOrUpdateProductViewController.swift
//  Saal
//
//  Created by Mozhgan
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Combine
import CombineCocoa
import SnapKit

fileprivate extension Contstant {
    static let cellIdentifer = "RelatedProductIdentifer"
    static let rowHeight = 50.0
}
final class ProductViewController: UIViewController {
    
    // MARK: - Public properties -
    var presenter: ProductPresenter!
    
    // MARK: - Private properties -
    
    private var cancellables = Set<AnyCancellable>()
    
    private lazy var stackView: UIStackView = {
        let stackView = UIStackView(frame: .zero)
        stackView.axis = .vertical
        stackView.distribution = .fill
        stackView.spacing = Layout.spacing8
        return stackView
    }()
    
    private lazy var categoryPickerView: PickerView = {
        let categoryPickerView = PickerView(configuration: PickerView.Configuration(items: []))
        categoryPickerView.borderStyle = .roundedRect
        categoryPickerView.placeholder = R.string.category.name()
        return categoryPickerView
    }()
    
    private lazy var idTextField: UITextField = {
        let idTextField = UITextField()
        idTextField.borderStyle = .roundedRect
        idTextField.placeholder = R.string.product.id()
        return idTextField
    }()
    
    private lazy var titleTextField: UITextField = {
        let titleTextField = UITextField()
        titleTextField.borderStyle = .roundedRect
        titleTextField.placeholder = R.string.product.name()
        return titleTextField
    }()
    
    private lazy var descriptionTextField: UITextField = {
        let descriptionTextField = UITextField()
        descriptionTextField.borderStyle = .roundedRect
        descriptionTextField.placeholder = R.string.product.description()
        return descriptionTextField
    }()
    
    private lazy var relatedButton: UIButton = {
        let btn = UIButton(type: .system)
        btn.setTitle(R.string.product.relatedTitle(), for: .normal)
        btn.backgroundColor = R.color.primaryColor()?.withAlphaComponent(0.8)
        btn.setTitleColor(R.color.onPrimary(), for: .normal)
        btn.alpha = 0.4
        return btn
    }()
    
    private lazy var saveButton: UIButton = {
        let btn = UIButton(type: .system)
        btn.setTitle(R.string.product.save(), for: .normal)
        btn.backgroundColor = R.color.primaryColor()
        btn.setTitleColor(R.color.onPrimary(), for: .normal)
        return btn
    }()
    
    private lazy var tableView: UITableView = {
        let tableView = UITableView(frame: CGRect.zero, style: .plain)
        tableView.separatorStyle = .none
        tableView.backgroundColor = .clear
        tableView.estimatedRowHeight = Contstant.rowHeight
        tableView.rowHeight = UITableView.automaticDimension
        tableView.register(UITableViewCell.self,
                           forCellReuseIdentifier: Contstant.cellIdentifer)
        return tableView
    }()
    
    private lazy var dataSource : ProductsDataSource<RelatedProductsCellActions> = {
        let dataSource : ProductsDataSource<RelatedProductsCellActions> = .init(tableView: self.tableView,
                                                                                cellIdentifer: Contstant.cellIdentifer)
        return dataSource
    }()
    
    
    // MARK: - init
    required init() {
        super.init(nibName: nil, bundle: nil)
        
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("Never will happen")
    }
    
    // MARK: - Life cycle
    
    deinit {
        print("deinit :: \(self)")
    }
    
    override func loadView() {
        super.loadView()
        self.view.backgroundColor = .systemBackground
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupView()
        self.binding()
    }
    
    private func setupView() {
        self.title = R.string.product.productPageTitle()
        self.tableView.dataSource = dataSource
        self.view.addSubview(self.stackView)
        self.stackView.addArrangedSubview(idTextField)
        self.stackView.addArrangedSubview(categoryPickerView)
        self.stackView.addArrangedSubview(titleTextField)
        self.stackView.addArrangedSubview(descriptionTextField)
        self.stackView.setCustomSpacing(Layout.spacing28, after: descriptionTextField)
        self.stackView.addArrangedSubview(relatedButton)
        self.stackView.addArrangedSubview(saveButton)
        self.stackView.addArrangedSubview(tableView)
        self.setConstraints()
    }
    
    private func setConstraints() {
        stackView.snp.makeConstraints { make in
            make.top.equalTo(self.view.safeArea.top).offset(Layout.padding16)
            make.bottom.equalTo(self.view.safeArea.bottom).offset(Layout.padding8)
            make.leading.trailing.equalToSuperview().inset(Layout.padding8)
        }
    }
    
    private func binding() {
        dataSourceBinding()
        presenterBinding()
        viewBinding()
    }
    
    private func dataSourceBinding() {
        dataSource.actionPublisher
            .compactMap({$0})
            .sink(receiveValue: { [weak self] event in
                switch event {
                case .delete(product: let product):
                    self?.presenter.viewEventSubject.send(.removeRelation(product: product))
                }
            }).store(in: &cancellables)
    }
    private func presenterBinding() {
        presenter
            .$productViewData
            .map(\.?.id)
            .replaceNil(with: "")
            .map({$0.isEmpty})
            .assign(to: \.isEnabled, on: idTextField)
            .store(in: &cancellables)
        
        presenter.$productViewData
            .compactMap({$0})
            .sink { [weak self] productViewData in
                self?.idTextField.text = productViewData.id
                self?.titleTextField.text = productViewData.title
                self?.descriptionTextField.text = productViewData.description
                self?.categoryPickerView.configuration = PickerView.Configuration(items: productViewData.categories.map({.init(id: $0.id,
                                                                                                                               name: $0.name,
                                                                                                                               isSelected: $0.isSelected)}))
                self?.dataSource.update(with: productViewData.relations, animate: true)
            }.store(in: &cancellables)
    }
    
    private func viewBinding() {
        saveButton.tapPublisher.sink { [weak self] in
            guard let self = self else { return }
            self.view.endEditing(true)
            self.presenter.viewEventSubject.send(.save)
        }.store(in: &cancellables)
        
        categoryPickerView.$rowSelectedPublisher
            .compactMap({$0})
            .sink { [weak self] indexPath in
            guard let self = self else { return }
            self.presenter.viewEventSubject.send(.selectedCategory(index: indexPath.row))
        }.store(in: &cancellables)
        
        relatedButton.tapPublisher.sink { [weak self] in
            guard let self = self else { return }
            self.presenter.viewEventSubject.send(.addRelatedProduct)
        }.store(in: &cancellables)
        
        Publishers.CombineLatest3(
            idTextField.textPublisher,
            titleTextField.textPublisher,
            descriptionTextField.textPublisher
        ).sink { [weak self] (id,title, description) in
            guard let self = self else { return }
            self.presenter.productViewData = self.presenter
                .productViewData?.set(id: id)
                .set(title: title)
                .set(description: description)
        }.store(in: &cancellables)
    }
    
}
