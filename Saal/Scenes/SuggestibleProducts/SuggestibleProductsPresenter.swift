//
//  SuggestibleProductsPresenter.swift
//  Saal
//
//  Created by Mozhgan on 8/11/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import Combine

extension SuggestibleProductsViewController {
    enum ViewEvent {
        case viewDidLoad
        case didSelected(indexPath : IndexPath)
        case didDeselected(indexPath : IndexPath)
        case done
    }
}

fileprivate protocol SuggestibleProductsWireframeMoudleProtocol : AnyObject {
    func getSelectedProducts()
}
final class SuggestibleProductsPresenter : Presentation {
    typealias ViewEvent = SuggestibleProductsViewController.ViewEvent
    
    var viewEventSubject: PassthroughSubject<SuggestibleProductsViewController.ViewEvent, Never> = .init()
    
    
    // MARK: - Private properties -
    
    private let interactor: SuggestibleProductsInteractorInterface
    private let wireframe: SuggestibleProductsWireframeInterface
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Public properties -
    @Published private(set) var products : [ProductViewItem] = []
    private var selectedIndexs : Set<IndexPath>  = []
    weak var delegate: SuggestibleProductsWireframeMoudleDelegate?
    // MARK: - Lifecycle -
    
    init(
        interactor: SuggestibleProductsInteractorInterface,
        wireframe: SuggestibleProductsWireframeInterface,
        delegate: SuggestibleProductsWireframeMoudleDelegate
    ) {
        self.interactor = interactor
        self.wireframe = wireframe
        self.delegate = delegate
        self.binding()
    }
    
    private func binding() {
        viewEventSubject
            .sink { [weak self] viewEvent in
                guard let self = self else { return }
                switch viewEvent {
                case .viewDidLoad:
                    self.products = self.interactor.products.map({.init(id: $0.id,
                                                                        categoryName: $0.category.first?.name ?? "",
                                                                        name: $0.name,
                                                                        comment: $0.productDescription ?? "")})
                case .didSelected(indexPath: let indexPath):
                    self.selectedIndexs.insert(indexPath)
                case .didDeselected(indexPath: let indexPath):
                    self.selectedIndexs.remove(indexPath)
                case .done:
                    self.getSelectedProducts()
                }
            }.store(in: &cancellables)
    }
}

extension SuggestibleProductsPresenter : SuggestibleProductsWireframeMoudleDelegate {
    func didFinish(relatedProducts: [Product]) {
        self.delegate?.didFinish(relatedProducts: relatedProducts)
        self.wireframe.dismissSuggestibleProducts()
    }
}

extension SuggestibleProductsPresenter : SuggestibleProductsWireframeMoudleProtocol {
    func getSelectedProducts() {
        let indexes = self.selectedIndexs.map({$0.row})
        let products = interactor.getSelectedProducts(with: indexes)
        self.didFinish(relatedProducts: products)
    }
}
