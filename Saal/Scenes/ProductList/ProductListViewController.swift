//
//  ProductListViewController.swift
//  Saal
//
//  Created by Mozhgan 
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import SnapKit
import Combine

fileprivate extension Contstant {
    static let cellIdentifer = "ProductIdentifer"
    static let rowHeight = 50.0
}

final class ProductListViewController: UITableViewController {
    
    // MARK: - Public properties -
    
    var presenter: ProductListPresenter!
    
    // MARK: - Private properties -
    
    private lazy var searchController : UISearchController = {
        let searchController = UISearchController(searchResultsController: nil)
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = R.string.product.searchbarPlaceHolder()
        definesPresentationContext = true
        searchController.searchBar.sizeToFit()
        return searchController
    }()
    
    private lazy var addButton : UIButton = {
        let addButton = UIButton(primaryAction: UIAction(title: "",
                                                         image: UIImage(systemName: "plus.circle"),
                                                         handler: { [weak self] action in
            guard let self = self else {
                return
            }
            self.presenter.viewEventSubject.send(.add)
        }))
        return addButton
    }()
    
    private lazy var dataSource : ProductsDataSource<ProductListCellActions> = {
        let dataSource : ProductsDataSource<ProductListCellActions> = .init(tableView: self.tableView,
                                                                            cellIdentifer: Contstant.cellIdentifer)
        return dataSource
    }()
    
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpViews()
        binding()
        presenter.viewEventSubject.send(.viewDidLoad)
    }
    
    private func setUpViews() {
        title = R.string.product.productPageTitle()
        self.navigationItem.rightBarButtonItem = .init(customView: addButton)
        tableView.dataSource = self.dataSource
        tableView.separatorStyle = .none
        tableView.register(UITableViewCell.self,
                           forCellReuseIdentifier: Contstant.cellIdentifer)
        navigationItem.searchController = searchController
        definesPresentationContext = true
        navigationItem.hidesSearchBarWhenScrolling = false
    }
    
    private func binding() {
        presenterBinding()
        dataSourceBinding()
    }
    
    private func presenterBinding() {
        presenter.$products
            .sink { [weak self] products in
                self?.dataSource.update(with: products)
            }.store(in: &cancellables)
        
        presenter.$deletedProduct.compactMap({$0}).sink { [weak self] productViewItem in
            self?.dataSource.delete(with: productViewItem)
        }.store(in: &cancellables)
    }
    
    private func dataSourceBinding() {
        dataSource.actionPublisher
            .compactMap({$0})
            .sink(receiveValue: { [weak self] event in
                switch event {
                case .update(product: let product):
                    self?.presenter.viewEventSubject.send(.update(product: product))
                case .delete(product: let product):
                    self?.presenter.viewEventSubject.send(.delete(product: product))
                }
            }).store(in: &cancellables)
    }
    
}

extension ProductListViewController : UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        self.presenter.viewEventSubject.send(.search(keyword: searchController.searchBar.text))
    }
}
