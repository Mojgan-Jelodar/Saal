//
//  SuggestibleProductsViewController.swift
//  Saal
//
//  Created by Mozhgan on 8/11/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Combine

fileprivate extension Contstant {
    static let cellIdentifer = "ProductIdentifer"
    static let rowHeight = 50.0
}

final class SuggestibleProductsViewController: UITableViewController {

    // MARK: - Public properties -

    var presenter: SuggestibleProductsPresenter!
    
    // MARK: - Private properties -
    
    private var cancellables = Set<AnyCancellable>()
    
    private lazy var dataSource : ProductsDataSource<SuggestibleViewCellActions> = {
        let dataSource : ProductsDataSource<SuggestibleViewCellActions> = .init(tableView: self.tableView,
                                                                            cellIdentifer: Contstant.cellIdentifer)
        return dataSource
    }()

    // MARK: - Lifecycle -
    
    deinit {
        print("deinit :: \(self)")
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        binding()
        presenter.viewEventSubject.send(.viewDidLoad)
    }
    
    private func setupView() {
        title = R.string.product.relatedTitle()
        navigationItem.rightBarButtonItem = .init(title: R.string.common.doneAction(), image: nil, primaryAction: UIAction(handler: { [weak self] action in
            self?.presenter.viewEventSubject.send(.done)
        }), menu: nil)
        tableView.allowsMultipleSelection = true
        tableView.allowsSelectionDuringEditing = true
        tableView.dataSource = self.dataSource
        tableView.separatorStyle = .none
        tableView.register(CheckableTableViewCell.self,
                           forCellReuseIdentifier: Contstant.cellIdentifer)
    }
    private func binding() {
        viewBinding()
        presenterBinding()
    }
    
    private func viewBinding() {
        tableView.didSelectRowPublisher.sink { [weak self] indexPath in
            self?.presenter.viewEventSubject.send(.didSelected(indexPath: indexPath))
        }.store(in: &cancellables)
        
        tableView.didDeselectRowPublisher.sink {  [weak self] indexPath in
            self?.presenter.viewEventSubject.send(.didDeselected(indexPath: indexPath))
        }.store(in: &cancellables)
    }
    
    private func presenterBinding() {
        presenter.$products
            .sink { [weak self] products in
                self?.dataSource.update(with: products)
            }.store(in: &cancellables)
    }

}
