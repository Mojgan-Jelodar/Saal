//
//  ProductListWireframe.swift
//  Saal
//
//  Created by Mozhgan
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

extension ProductListViewController {
    enum Desination {
        case add(delegate :ProductMoudleDelegate)
        case update(product : Product,delegate :ProductMoudleDelegate)
    }
}
protocol ProductListWireframeDS {
    var dataStore : ProductListDataStore? { get }
}

final class ProductListWireframe: BaseWireframe<ProductListViewController>,ProductListWireframeDS {
    var dataStore: ProductListDataStore?
    // MARK: - Module setup -

    init(storageContext : StorageContext) {
        let moduleViewController = ProductListViewController()
        super.init(viewController: moduleViewController)
        let interactor = ProductListInteractor(storageContext: storageContext)
        let presenter = ProductListPresenter<RunLoop>(interactor: interactor, wireframe: self, debounce: .default)
        moduleViewController.presenter = presenter
        self.dataStore = interactor
      
    }

}

// MARK: - Extensions -

extension ProductListWireframe: ProductListWireframeInterface {
    func routeTo(desination: ProductListViewController.Desination) {
        switch desination {
        case .add(delegate: let delegate):
            let vc = ProductWireframe(storageContext: self.dataStore!.storageContext, moudleDelegate: delegate)
            navigationController?.pushWireframe(vc, animated: true)
        case .update(product: let product, delegate: let delegate):
            let vc = ProductWireframe(product: product, storageContext: self.dataStore!.storageContext, moudleDelegate: delegate)
            navigationController?.pushWireframe(vc, animated: true)
        }
    }
}
